import os
import logging
from typing import List, Tuple, Dict, Any
import json
import time
from config import LLAMA_SCOUT_MODEL, TEMPERATURE, MAX_TOKENS, ERROR_MESSAGES

logger = logging.getLogger(__name__)

# Placeholder for Cerebras SDK import
# In production, install the Cerebras SDK with: pip install cerebras-cloud-sdk
# For now, we'll create a mock implementation for demo purposes
try:
    from cerebras.cloud.sdk import Cerebras
    CEREBRAS_SDK_AVAILABLE = True
except ImportError:
    logger.warning("Cerebras SDK not available, using mock implementation")
    CEREBRAS_SDK_AVAILABLE = False


def process_with_llama_scout(
    query: str,
    regulation_data: List[str],
    api_key: str
) -> Tuple[str, List[int]]:
    """
    Process regulation data with Llama Scout model via Cerebras API.
    
    Args:
        query: The user's query about automotive regulations
        regulation_data: List of extracted regulation content
        api_key: Cerebras API key
    
    Returns:
        Tuple containing:
            - The answer text generated by the model
            - List of source indices used in the response
    """
    logger.info("Processing regulation data with Llama Scout model")
    
    if not regulation_data:
        logger.warning("No regulation data provided for processing")
        raise ValueError(ERROR_MESSAGES["no_data_found"])
    
    try:
        # Combine all regulation data with source indicators
        context = ""
        for i, data in enumerate(regulation_data):
            context += f"[Source {i}]\n{data}\n\n"
        
        # Create the prompt for the model
        prompt = create_prompt(query, context)
        
        # Call the Cerebras API with Llama Scout model
        if CEREBRAS_SDK_AVAILABLE:
            answer, source_indices = call_cerebras_api(prompt, api_key)
        else:
            # Use mock implementation for demo/testing
            answer, source_indices = mock_cerebras_api(prompt, len(regulation_data))
        
        logger.info(f"Successfully processed with Llama Scout model. Referenced {len(source_indices)} sources.")
        return answer, source_indices
    
    except Exception as e:
        logger.error(f"Error in process_with_llama_scout: {str(e)}")
        raise Exception(ERROR_MESSAGES["cerebras_api_error"])


def create_prompt(query: str, context: str) -> str:
    """
    Create a prompt for the Llama Scout model.
    
    Args:
        query: The user's query about automotive regulations
        context: Combined regulation data with source indicators
    
    Returns:
        Formatted prompt string
    """
    return f"""You are an Automotive Regulatory Expert with 30 years of experience in global homologation and compliance. 
Your task is to answer the user's question about automotive regulations based ONLY on the provided sources.

Sources:
{context}

Important instructions:
1. ONLY use information from the provided sources to answer the question.
2. If the sources don't contain relevant information, say "I don't have enough information from reliable regulatory sources to answer this question."
3. Be specific about which source you are using by referencing the source number like [Source 0], [Source 1], etc.
4. Don't make up any information. Only rely on the provided sources.
5. For any regulatory information, indicate which regions/countries it applies to.
6. Format your answer in clear paragraphs with relevant headings where appropriate.
7. At the end of your answer, list the source numbers you referenced.

User question: {query}

Expert answer:"""


def call_cerebras_api(prompt: str, api_key: str) -> Tuple[str, List[int]]:
    """
    Call the Cerebras API with the Llama Scout model.
    
    Args:
        prompt: The formatted prompt
        api_key: Cerebras API key
    
    Returns:
        Tuple containing:
            - The answer text generated by the model
            - List of source indices used in the response
    """
    client = Cerebras(api_key=api_key)
    
    # Call the Cerebras API with the Llama Scout model
    response = client.chat.completions.create(
        messages=[
            {"role": "user", "content": prompt}
        ],
        model=LLAMA_SCOUT_MODEL,
        temperature=TEMPERATURE,
        max_tokens=MAX_TOKENS
    )
    
    # Extract the generated text
    answer = response.choices[0].message.content
    
    # Extract source indices from the response
    source_indices = extract_source_indices(answer)
    
    return answer, source_indices


def mock_cerebras_api(prompt: str, num_sources: int) -> Tuple[str, List[int]]:
    """
    Mock implementation of Cerebras API for development/testing.
    
    Args:
        prompt: The formatted prompt
        num_sources: Number of available sources
    
    Returns:
        Tuple containing:
            - Mocked answer text
            - List of mocked source indices
    """
    logger.info("Using mock Cerebras API implementation")
    
    # Extract the query from the prompt
    query_start = prompt.find("User question:") + 15
    query = prompt[query_start:].strip()
    
    # Simulate processing time
    time.sleep(2)
    
    # Create a mock response based on the query
    if "fuel" in query.lower() or "gasoline" in query.lower() or "diesel" in query.lower():
        answer = """# Legal Fuel Types for US Passenger Cars

Based on the regulatory sources, here are the legal fuel types for passenger cars in the United States:

## Primary Fuel Types

**Gasoline (Petrol)**
According to [Source 0], regular unleaded gasoline with a minimum octane rating of 87 is the most common fuel type for passenger vehicles. The EPA requires that most gasoline sold in the US contains a minimum of 10% ethanol (E10 blend).

**Diesel Fuel**
[Source 1] indicates that Ultra Low Sulfur Diesel (ULSD) with a maximum sulfur content of 15 parts per million (ppm) is required for all highway diesel vehicles. This has been mandatory since 2007 under EPA regulations.

## Alternative Fuels

**Ethanol Blends**
As stated in [Source 0], E15 (15% ethanol blend) is approved by the EPA for use in model year 2001 and newer vehicles. E85 (85% ethanol) is approved specifically for flexible fuel vehicles (FFVs).

**Natural Gas and Propane**
[Source 2] confirms that compressed natural gas (CNG) and liquefied petroleum gas (LPG/propane) are EPA-approved alternative fuels for passenger vehicles, provided they meet appropriate ASTM standards.

**Electric Power**
Electric vehicles using battery power or hydrogen fuel cells are recognized as zero-emission vehicles under federal regulations, as noted in [Source 1].

## Regulatory Requirements

All motor fuels sold in the United States must be:
- Registered with the EPA
- Compliant with Clean Air Act requirements
- Subject to the Renewable Fuel Standard (RFS) program

Regional variations may apply, particularly in California where CARB (California Air Resources Board) has additional fuel specifications.

Sources referenced: [Source 0], [Source 1], [Source 2]"""
        source_indices = [0, 1, 2]
    
    elif "emissions" in query.lower():
        answer = """# Emissions Regulations Overview

Based on the provided regulatory sources, the latest emissions standards for vehicles vary by region:

## European Union
According to [Source 0], the EU has implemented Euro 6d standards for passenger vehicles, which set strict limits on nitrogen oxides (NOx) and particulate matter. The upcoming Euro 7 standards, expected to be implemented by 2025, will further reduce emission limits and introduce real-world driving emissions testing.

## United States
[Source 2] indicates that the EPA has established Tier 3 emissions standards, which are phased in from 2017 through 2025. These standards reduce both tailpipe and evaporative emissions from passenger cars, light-duty trucks, and some heavy-duty vehicles.

## China
As mentioned in [Source 1], China has implemented China 6 emissions standards, which are considered among the most stringent globally and are comparable to Euro 6 standards but with some additional requirements for particulate number (PN) emissions.

Always verify these regulations with the latest official documentation as emission standards are regularly updated.

Sources referenced: [Source 0], [Source 1], [Source 2]"""
        source_indices = [0, 1, 2]
    
    elif "safety" in query.lower():
        answer = """# Vehicle Safety Requirements

Based on the regulatory information provided:

## Global Requirements
[Source 3] outlines that the United Nations Economic Commission for Europe (UNECE) has established various safety regulations under the 1958 Agreement. These regulations cover aspects such as braking systems, lighting equipment, passive safety (crash performance), and active safety systems.

## EU Requirements
According to [Source 0], the General Safety Regulation (GSR) requires all new vehicle types to be equipped with advanced safety features including:
- Emergency braking systems
- Lane-keeping assistance
- Driver drowsiness and attention warning
- Advanced emergency braking for pedestrians and cyclists

## US Requirements
[Source 2] states that the National Highway Traffic Safety Administration (NHTSA) mandates Federal Motor Vehicle Safety Standards (FMVSS) that cover crash avoidance, crashworthiness, and post-crash safety elements.

The implementation timelines for these requirements vary by region and vehicle category, so it's essential to check the specific regulations for your vehicle type and target market.

Sources referenced: [Source 0], [Source 2], [Source 3]"""
        source_indices = [0, 2, 3]
    
    elif "homologation" in query.lower() or "type approval" in query.lower():
        answer = """# Vehicle Homologation Process

Based on the provided sources, here's an overview of the vehicle homologation process:

## What is Homologation?
According to [Source 1], homologation is the process of certifying that a vehicle meets the regulatory requirements of a specific market. It involves testing and documentation to prove compliance with safety, emissions, and other technical standards.

## EU Type Approval Process
[Source 0] explains that in the European Union, vehicle type approval is governed by Regulation (EU) 2018/858. The process typically involves:
1. Testing of vehicle systems and components by a designated Technical Service
2. Submission of test reports to a Type Approval Authority
3. Issuance of a Certificate of Conformity (CoC) if requirements are met

## Global Recognition
[Source 3] mentions that under the UNECE 1958 Agreement, type approvals issued by one contracting party can be accepted by other parties, facilitating international trade without requiring redundant testing.

## Key Documentation
As stated in [Source 4], the essential documentation for homologation includes:
- Technical specifications
- Test reports
- Compliance statements
- Certificates of Conformity

Each market has specific requirements, so it's crucial to understand the individual regulations for your target countries.

Sources referenced: [Source 0], [Source 1], [Source 3], [Source 4]"""
        source_indices = [0, 1, 3, 4]
    
    else:
        # More specific response for unmatched queries
        answer = f"""# Automotive Regulatory Information

Based on the available regulatory sources, I need to provide information about: "{query}"

## Available Information
[Source 0] indicates that automotive regulations in the United States are primarily governed by federal agencies including the EPA (Environmental Protection Agency) for emissions and fuel standards, and NHTSA (National Highway Traffic Safety Administration) for safety requirements.

## Regulatory Framework
According to [Source 1], the regulatory framework varies by topic area:
- **Emissions and Fuel Standards**: Governed by EPA under the Clean Air Act
- **Safety Standards**: Managed by NHTSA under Federal Motor Vehicle Safety Standards (FMVSS)
- **Energy Efficiency**: Overseen by both EPA and NHTSA through CAFE standards

## Compliance Requirements
[Source 2] states that manufacturers must demonstrate compliance through:
- Testing and certification procedures
- Documentation submission to relevant authorities
- Ongoing production compliance monitoring

**Note**: For specific details about your particular question, I would need access to more targeted regulatory sources that directly address this topic. The provided sources contain general automotive regulatory information but may not cover all specific aspects of your inquiry.

For the most current and specific information, please consult the official websites of relevant regulatory agencies or contact qualified regulatory experts.

Sources referenced: [Source 0], [Source 1], [Source 2]"""
        # Use available sources
        source_indices = list(range(min(3, num_sources)))
    
    return answer, source_indices


def extract_source_indices(text: str) -> List[int]:
    """
    Extract source indices referenced in the model's response.
    
    Args:
        text: The model's response text
    
    Returns:
        List of source indices
    """
    import re
    
    # Find all instances of [Source X] in the text
    matches = re.findall(r'\[Source\s+(\d+)\]', text)
    
    # Convert matches to integers and remove duplicates
    source_indices = list(set(int(match) for match in matches))
    
    return source_indices
